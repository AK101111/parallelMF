# parallelMF
Parallel implementation of Matrix Factorization using OpenMP.

i# proj3-grader
This repository is for the use of graders to help them with the grading process of proj3.

## Preprocessing Code

Grading this project requires the course virtual machine.

### Requirements

Download or clone the `proj3-grader` repository.
It contains scripts to build and run the student programs as well as
the zip file with student submissions.


### Running the scripts

Be patient, some of these commands may take some time.

Extract the zip file with student submissions:

```bash
unzip student_submissions.zip
```
For: Chavvi/(Aldo and Nadira) 
*[check correspondence of codes given to the graders]* 
change the second line* of compileAll.sh. This is done because the file given to students differ from students being graded by Chavvi vs the ones being done by Aldo and Nadira.

*Instructions provided in the file. `compileAll.sh`

make the two scripts executable

```bash
chmod +x compileAll.sh
chmod +x test.sh
```
compile and build all submissions:

```bash
./compileAll.sh
```

run the submitted programs and additional tests

```bash
./testAll.sh
```

### Interpreting Outputs

---
The files generated in the `student_submissions/<netid>/grade_outputs` directory give you information about the results and errors generated by the program. See below for details on each of the files.


#### `<dir>/build.log`

This file gives you build status for all three problems.
If all problems built successfully, the output should be

```

=============================

problem2: 0 (0 = success, 1,2 = need to check)

=============================

problem3: 0 (0 = success, 1,2 = need to check)

```

If `make` encountered any issues (warnings or errors), the output will contain a different return status and the record of errors.
You can include the error message in your comments (unless, they are looong, in which case you can include the first few lines and follow them by ...).

---

### Problem 1
### Problem 2
The problem involved reverse engineering C code from a given assembly. 
First glance at the assembly tells us that the assembly corresponding to all the three functions: `barx` where x=1,2,3 are almost the same and perform the same logic. The only difference being the type of data these functions operate on, and their return type. This is deduced by the fact that the register types differ rax/eax and the instructions to load the data differ movsbl/mov.
The figuring out the logic part is easy and corresponds to finding the first occurrence of the min/max depending on the grader.

If the program ran successfully, no output is expected in the file`p2_out.txt`, provided the `build.log` has no error corresponding to the problem.
Otherwise one or more of the following errors might be encountered:
If logic is flawed:
`bar<x> tests failed`
If first element is incorrectly initialized.
`bar<x> tests failed for one element array`
Or, if the init conditions/ for loop termination condition is incorrect.
`bar<x> tests failed for zero element array`

---
### Problem 3
Optimization done by solving problems noted below for each part.
**Obvious optimizations include changing the array access to row major.
#### Level 1
Read misses can easily be optimized on this as A,B are iterated in an orthogonal fashion. So in the unoptimized version either justice is done to A or B.

#### Level 2
No write misses observed as only 2 vars being updated. Read misses observed because separate entities inside a list element being read in separate loops. list has elements which are structs so the entities inside the struct are placed contiguously in memory.

#### Level 3
Noting the invariant of the matrix after the program has run,
for \bigvee i,j in [1,n]. 
A[i,j] = A[j,i].

---
The other files in this directory are mentioned in the Grading section below.


---

